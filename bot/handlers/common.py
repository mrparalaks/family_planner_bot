from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.keyboards.main_menu import (
    get_main_menu_keyboard,
    get_settings_keyboard,
    get_quick_access_keyboard,
    get_period_switch_keyboard,
    get_notification_time_inline_keyboard
)
from bot.handlers.events import new_event_start
from bot.services.db_services import db_service
from bot.config import load_config
from bot.handlers.utils import send_main_menu_with_quick_access

router = Router()
config = load_config()

@router.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    main_menu_message = await message.answer(
        "üìÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º–µ–π–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫!",
        reply_markup=get_main_menu_keyboard()
    )
    await main_menu_message.answer(
        "üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_quick_access_keyboard()
    )


@router.message(F.text == "–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
async def new_event_handler(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    await new_event_start(message, state)

@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=get_settings_keyboard())

@router.callback_query(F.data == "notification_settings")
async def notification_settings_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'."""
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=get_notification_time_inline_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("notification_"))
async def notification_time_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    notification_time_mapping = {
        "notification_10_min": "00:10",
        "notification_30_min": "00:30",
        "notification_1_hour": "01:00",
        "notification_1_day": "24:00"
    }
    notification_time = notification_time_mapping[callback.data]
    db_service.set_user_notification_time(callback.from_user.id, notification_time)
    await callback.message.answer(
        f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –∑–∞ {notification_time} –¥–æ —Å–æ–±—ã—Ç–∏—è."
    )
    await send_main_menu_with_quick_access(callback.message)
    await callback.answer()

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
    await send_main_menu_with_quick_access(callback.message)
    await callback.answer()

@router.message(Command("set_family_chat"))
async def set_family_chat(message: Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ–º–µ–π–Ω–æ–≥–æ —á–∞—Ç–∞."""
    if message.from_user.id in config.bot.admin_ids:
        chat_id = message.chat.id
        db_service.set_family_chat_id(chat_id)
        await message.answer(f"–°–µ–º–µ–π–Ω—ã–π —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_id}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@router.callback_query(F.data == "quick_new_event")
async def quick_new_event(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ'."""
    from bot.handlers.events import new_event_start
    await new_event_start(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "quick_my_events")
async def quick_my_events(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è'."""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=get_period_switch_keyboard())
    await callback.answer()

@router.callback_query(F.data == "quick_family_events")
async def quick_family_events(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°–µ–º–µ–π–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'."""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=get_period_switch_keyboard())
    await callback.answer()

@router.callback_query(F.data == "quick_settings")
async def quick_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'."""
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()
